/* n1527lib.h
Declares and defines the N1527 proposal for the C programming language
(C) 2010 Niall Douglas http://www.nedproductions.biz/


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef N1527LIB_INCLUDED
#define N1527LIB_INCLUDED
#if 1 /* You have a modern compiler */
#include <stdint.h>
#else /* else if you have no stdint.h */
typedef size_t uintmax_t;
#endif
#include <stdlib.h>

/*! \file n1527lib.h
\brief Declares and defines the N1527 proposal for the C programming language
*/

#if __STDC_VERSION__ < 199901L		/* not C99 or better */
#if !defined(RESTRICT) && (defined(_MSC_VER) || defined(__GNUC__))
#define RESTRICT __restrict
#endif
typedef unsigned char _Bool;

/* If we don't have it we don't have it */
#ifndef RESTRICT
#define RESTRICT
#endif
#endif

/*! \def N1527MALLOCEXTSPEC
\brief Defines how this API is to be made visible.

N1527MALLOCEXTSPEC can be defined to be __declspec(dllexport) or
__attribute__ ((visibility("default"))) or whatever you like. It defaults
to extern unless N1527MALLOC_DLL_EXPORTS is set as it would be when building
the DLL.
 */
#ifndef N1527MALLOCEXTSPEC
 #ifdef N1527MALLOC_DLL_EXPORTS
  #ifdef WIN32
   #define N1527MALLOCEXTSPEC extern __declspec(dllexport)
  #elif defined(__GNUC__)
   #define N1527MALLOCEXTSPEC extern __attribute__ ((visibility("default")))
  #endif
 #else
 #endif
#endif
#ifndef N1527MALLOCEXTSPEC
#define N1527MALLOCEXTSPEC extern
#endif

#if defined(_MSC_VER) && _MSC_VER>=1400
 #define N1527MALLOCPTRATTR __declspec(restrict)
 #define N1527MALLOCNOALIASATTR __declspec(noalias)
#endif
#ifdef __GNUC__
 #define N1527MALLOCPTRATTR __attribute__ ((malloc))
#endif
/*! \def N1527MALLOCPTRATTR
\brief Defined to the specifier for a pointer which points to a memory block. Like N1527MALLOCNOALIASATTR, but sadly not identical. */
#ifndef N1527MALLOCPTRATTR
 #define N1527MALLOCPTRATTR
#endif
/*! \def N1527MALLOCNOALIASATTR
\brief Defined to the specifier for a pointer which does not alias any other variable. */
#ifndef N1527MALLOCNOALIASATTR
 #define N1527MALLOCNOALIASATTR
#endif



/******** The standard definition stuff begins here ********/

#ifndef M2_FLAGS_DEFINED
#define M2_FLAGS_DEFINED

#define M2_ZERO_MEMORY          (1<<0)
#define M2_PREVENT_MOVE         (1<<1)
#define M2_CONSTANT_TIME        (1<<2)
#define M2_RESERVE_IS_MULT      (1<<3)
#define M2_BATCH_IS_ALL_ALLOC   (1<<4)
#define M2_BATCH_IS_ALL_REALLOC (1<<5)
#define M2_BATCH_IS_ALL_FREE    (1<<6)

/* Proprietary */
#define M2_ALWAYS_MMAP          (1<<15)

#define M2_USERFLAGS_FIRST      (1<<16)
#define M2_USERFLAGS_LAST       (1<<31)
#define M2_USERFLAGS_MASK       0xffff0000

#endif /* M2_FLAGS_DEFINED */

#if defined(__cplusplus)
extern "C" {
#endif

#ifndef MALLOCATION2_DEFINED
#define MALLOCATION2_DEFINED
/*! \brief The structure used by the batch_alloc2() function */
struct n1527_mallocation2 {
  void *ptr;
  size_t size;
};
#endif

#ifndef MALLOCATION5_DEFINED
#define MALLOCATION5_DEFINED
/*! \brief The structure used by the batch_alloc5() function */
struct n1527_mallocation5 {
  void *ptr;
  size_t size;
  size_t alignment;
  size_t reserve;
  uintmax_t flags;
};
#endif

/*! \brief Allocates aligned memory */
N1527MALLOCEXTSPEC N1527MALLOCNOALIASATTR N1527MALLOCPTRATTR void *n1527_aligned_alloc(size_t alignment, size_t size);
/*! \brief Resizes aligned memory */
N1527MALLOCEXTSPEC N1527MALLOCNOALIASATTR N1527MALLOCPTRATTR void *n1527_aligned_realloc(void *ptr, size_t alignment, size_t size);
/*! \brief Performs a sequence of same-sized allocation, resizes and deallocations */
N1527MALLOCEXTSPEC N1527MALLOCNOALIASATTR N1527MALLOCPTRATTR void **n1527_batch_alloc1(int *errnos, void **ptrs, size_t *RESTRICT count, size_t *RESTRICT size, size_t alignment, size_t reserve, uintmax_t flags);
/*! \brief Performs a sequences of allocations, resizes and deallocations */
N1527MALLOCEXTSPEC _Bool n1527_batch_alloc2(int *errnos, struct n1527_mallocation2 **RESTRICT mdataptrs, size_t *RESTRICT count, size_t alignment, size_t reserve, uintmax_t flags);
/*! \brief Performs a sequences of allocations, resizes and deallocations */
N1527MALLOCEXTSPEC _Bool n1527_batch_alloc5(int *errnos, struct n1527_mallocation5 **RESTRICT mdataptrs, size_t *RESTRICT count);
/*! \brief Allocates zeroed memory */
N1527MALLOCEXTSPEC N1527MALLOCNOALIASATTR N1527MALLOCPTRATTR void *n1527_calloc(size_t nmemb, size_t size);
/*! \brief Frees both aligned and non-aligned blocks */
N1527MALLOCEXTSPEC void n1527_free(void *ptr);
/*! \brief Allocates zeroed memory */
N1527MALLOCEXTSPEC N1527MALLOCNOALIASATTR N1527MALLOCPTRATTR void *n1527_malloc(size_t size);
/*! \brief Returns the size of an existing block */
N1527MALLOCEXTSPEC size_t n1527_malloc_usable_size(void *ptr);
/*! \brief Allocates zeroed memory */
N1527MALLOCEXTSPEC N1527MALLOCNOALIASATTR N1527MALLOCPTRATTR void *n1527_realloc(void *ptr, size_t size);
/*! \brief A non-relocating aligned resize */
N1527MALLOCEXTSPEC N1527MALLOCNOALIASATTR N1527MALLOCPTRATTR void *n1527_try_aligned_realloc(void *ptr, size_t alignment, size_t size);
/*! \brief A non-relocating resize */
N1527MALLOCEXTSPEC N1527MALLOCNOALIASATTR N1527MALLOCPTRATTR void *n1527_try_realloc(void *ptr, size_t size);


#if defined(__cplusplus)
}
#endif

#endif /* N1527LIB_INCLUDED */
