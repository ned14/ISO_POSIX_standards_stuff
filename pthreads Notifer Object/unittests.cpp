/* unittests.cpp
Unit testing for pthread_permit1 and pthread_permit
(C) 2012 Niall Douglas http://www.nedproductions.biz/


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#define CATCH_CONFIG_MAIN
#include "../catch.hpp"

#include "pthread_permit.h"

TEST_CASE("timespec/diff", "Tests that timespec_diff works as intended")
{
  struct timespec start, end;
  end.tv_sec=0; end.tv_nsec=500;
  start.tv_sec=0; start.tv_nsec=400;
  REQUIRE(timespec_diff(&end, &start)==100);
  end.tv_sec=0; end.tv_nsec=400;
  start.tv_sec=0; start.tv_nsec=500;
  REQUIRE(timespec_diff(&end, &start)==-100);
  end.tv_sec=1; end.tv_nsec=400;
  start.tv_sec=0; start.tv_nsec=500;
  REQUIRE(timespec_diff(&end, &start)==999999900);
}




TEST_CASE("pthread_permit1/initdestroy", "Tests repeated init and destroy on same object")
{
  pthread_permit1_t permit;
  REQUIRE(0==pthread_permit1_init(&permit, 1));
  REQUIRE(0==pthread_permit1_grant(&permit));
  pthread_permit1_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit1_grant(&permit));
  REQUIRE(0==pthread_permit1_init(&permit, 1));
  REQUIRE(0==pthread_permit1_grant(&permit));
  pthread_permit1_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit1_grant(&permit));
}

TEST_CASE("pthread_permit1/initwait1", "Tests initially granted doesn't wait, and that grants cause exactly one wait")
{
  pthread_permit1_t permit;
  REQUIRE(0==pthread_permit1_init(&permit, 1));
  REQUIRE(0==pthread_permit1_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit1_timedwait(&permit, NULL, NULL));
  pthread_permit1_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit1_grant(&permit));
}

TEST_CASE("pthread_permit1/initwait2", "Tests not initially granted does wait")
{
  pthread_permit1_t permit;
  REQUIRE(0==pthread_permit1_init(&permit, 0));
  REQUIRE(ETIMEDOUT==pthread_permit1_timedwait(&permit, NULL, NULL));
  pthread_permit1_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit1_grant(&permit));
}

TEST_CASE("pthread_permit1/grantwait", "Tests that grants cause exactly one wait")
{
  pthread_permit1_t permit;
  REQUIRE(0==pthread_permit1_init(&permit, 0));
  REQUIRE(0==pthread_permit1_grant(&permit));
  REQUIRE(0==pthread_permit1_grant(&permit));
  REQUIRE(0==pthread_permit1_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit1_timedwait(&permit, NULL, NULL));
  pthread_permit1_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit1_grant(&permit));
}

TEST_CASE("pthread_permit1/grantrevokewait", "Tests that grants cause exactly one wait and revoke revokes exactly once")
{
  pthread_permit1_t permit;
  REQUIRE(0==pthread_permit1_init(&permit, 0));
  REQUIRE(ETIMEDOUT==pthread_permit1_timedwait(&permit, NULL, NULL));
  REQUIRE(0==pthread_permit1_grant(&permit));
  pthread_permit1_revoke(&permit);
  REQUIRE(ETIMEDOUT==pthread_permit1_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit1_timedwait(&permit, NULL, NULL));

  REQUIRE(0==pthread_permit1_grant(&permit));
  REQUIRE(0==pthread_permit1_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit1_timedwait(&permit, NULL, NULL));
  pthread_permit1_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit1_grant(&permit));
}




TEST_CASE("pthread_permit/initdestroy", "Tests repeated init and destroy on same object")
{
  pthread_permit_t permit;
  REQUIRE(0==pthread_permit_init(&permit, 0, 1));
  REQUIRE(0==pthread_permit_grant(&permit));
  pthread_permit_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit_grant(&permit));
  REQUIRE(0==pthread_permit_init(&permit, 0, 1));
  REQUIRE(0==pthread_permit_grant(&permit));
  pthread_permit_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit_grant(&permit));
}

TEST_CASE("pthread_permit/initwait1", "Tests initially granted doesn't wait, and that grants cause exactly one wait")
{
  pthread_permit_t permit;
  REQUIRE(0==pthread_permit_init(&permit, 0, 1));
  REQUIRE(0==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));
  pthread_permit_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit_grant(&permit));
}

TEST_CASE("pthread_permit/initwait2", "Tests not initially granted does wait")
{
  pthread_permit_t permit;
  REQUIRE(0==pthread_permit_init(&permit, 0, 0));
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));
  pthread_permit_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit_grant(&permit));
}

TEST_CASE("pthread_permit/grantwait", "Tests that grants cause exactly one wait")
{
  pthread_permit_t permit;
  REQUIRE(0==pthread_permit_init(&permit, 0, 0));
  REQUIRE(0==pthread_permit_grant(&permit));
  REQUIRE(0==pthread_permit_grant(&permit));
  REQUIRE(0==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));
  pthread_permit_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit_grant(&permit));
}

TEST_CASE("pthread_permit/grantrevokewait", "Tests that grants cause exactly one wait and revoke revokes exactly once")
{
  pthread_permit_t permit;
  REQUIRE(0==pthread_permit_init(&permit, 0, 0));
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(0==pthread_permit_grant(&permit));
  pthread_permit_revoke(&permit);
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));

  REQUIRE(0==pthread_permit_grant(&permit));
  REQUIRE(0==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));
  pthread_permit_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit_grant(&permit));
}

TEST_CASE("pthread_permit/ncgrantrevokewait", "Tests that non-consuming grants disable all waits")
{
  pthread_permit_t permit;
  REQUIRE(0==pthread_permit_init(&permit, 1, 0));
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(0==pthread_permit_grant(&permit));
  pthread_permit_revoke(&permit);
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(ETIMEDOUT==pthread_permit_timedwait(&permit, NULL, NULL));

  REQUIRE(0==pthread_permit_grant(&permit));
  REQUIRE(0==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(0==pthread_permit_timedwait(&permit, NULL, NULL));
  REQUIRE(0==pthread_permit_timedwait(&permit, NULL, NULL));
  pthread_permit_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit_grant(&permit));
}




TEST_CASE("pthread_permitX/interchangeable", "Tests that permit1 and permit objects can not be confused by grant")
{
  pthread_permit1_t permit1;
  pthread_permit_t permit;
  REQUIRE(0==pthread_permit1_init(&permit1, 0));
  REQUIRE(0==pthread_permit_init(&permit, 0, 0));

  pthread_permitX_t somepermit;
  somepermit=&permit1;
  REQUIRE(0==pthread_permit1_grant(somepermit));
  somepermit=&permit;
  REQUIRE(0==pthread_permit_grant(somepermit));

  somepermit=&permit;
  REQUIRE(EINVAL==pthread_permit1_grant(somepermit));
  somepermit=&permit1;
  REQUIRE(EINVAL==pthread_permit_grant(somepermit));

  pthread_permit_destroy(&permit);
  REQUIRE(EINVAL==pthread_permit_grant(&permit));
  pthread_permit1_destroy(&permit1);
  REQUIRE(EINVAL==pthread_permit1_grant(&permit1));
}
